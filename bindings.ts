// This file has been generated by Specta. DO NOT EDIT.

import { createTauRPCProxy as createProxy, type InferCommandOutput } from 'taurpc'
type TAURI_CHANNEL<T> = (response: T) => void


export type BluetoothController = { name: string | null; address: string; devices: BluetoothDevice[] }

export type BluetoothData = { host: HostDistributions; controllers: BluetoothController[]; utc_timestamp: string; source_path: string }

export type BluetoothDevice = { name: string | null; address: string; device_type: BluetoothDeviceType; device_id: DeviceID | null; link_key: BluetoothLinkKey | null; le_data: BluetoothLowEnergyKey | null }

export type BluetoothDeviceType = "Classic" | "LowEnergy" | "DualMode" | "Corrupted"

export type BluetoothLinkKey = { key: string }

export type BluetoothLowEnergyKey = { identity_resolving_key: string | null; local_signature_key: string | null; long_term_key: string | null; key_length: number | null; ediv: string | null; rand: string | null }

export type DeviceID = { source: number | null; vendor: number | null; product: number | null; version: number | null }

export type HostDistributions = "Windows" | "Linux"

export type Message<T> = { type: "Success"; data: T } | { type: "Error"; data: string }

const ARGS_MAP = { 'linux':'{"parse_local_config":[]}', 'windows':'{"parse_windows_hive":["path_str"]}' }
export type Router = { "linux": {parse_local_config: () => Promise<Message<BluetoothData>>},
"windows": {parse_windows_hive: (pathStr: string) => Promise<Message<BluetoothData>>} };


export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP)
export type { InferCommandOutput }
