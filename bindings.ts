// This file has been generated by Specta. DO NOT EDIT.

import { createTauRPCProxy as createProxy, type InferCommandOutput } from 'taurpc'
type TAURI_CHANNEL<T> = (response: T) => void


export type BluetoothController = { name: string | null; address: string; devices: BluetoothDevice[] }

export type BluetoothData = { host: HostDistributions; controllers: BluetoothController[]; utc_timestamp: string }

export type BluetoothDevice = { name: string | null; address: [number, number, number, number, number, number]; device_type: BluetoothDeviceType; link_key: string | null }

export type BluetoothDeviceType = "Classic" | "LowEnergy"

export type HostDistributions = "Windows" | "Linux"

export type Message<T> = { Success: T } | { Error: string }

const ARGS_MAP = { '':'{"parse_windows_hive":["path_str"]}' }
export type Router = { "": {parse_windows_hive: (pathStr: string) => Promise<Message<BluetoothData>>} };


export const createTauRPCProxy = () => createProxy<Router>(ARGS_MAP)
export type { InferCommandOutput }
